version: '3'

x-airflow-common: &airflow-common
  # image: apache/airflow:2.10.3-python3.12
  # image: apache/airflow@sha256:a297f7672778ba65d4d95cd1fee0213133ae8d8dd176fe9a697af918f945368f   
  image: wcc/metrics-airflow-automation:1.2.0  
  platform: linux/amd64
  pull_policy: always
  env_file:
    - .env
  environment:    
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: "CeleryExecutor"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}"
    AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}"
    AIRFLOW__CELERY__BROKER_URL: "redis://:@redis:6379/0"
    # AIRFLOW__CELERY__BROKER_URL: redis://:${AIRFLOW_REDIS_PASSWORD}@redis:6379/0 
    AIRFLOW__CELERY__BROKER_CONNECTION_RETRY_ON_STARTUP: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'True'
    AIRFLOW__CORE__FERNET_KEY: "${AIRFLOW_FERNET_KEY}"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: "${AIRFLOW__WEBSERVER__SECRET_KEY}"
    AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI: "redis://:@redis:6379/0"
    # AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI: redis://:${AIRFLOW_REDIS_PASSWORD}@redis:6379/0   
    AIRFLOW__WEBSERVER__RATE_LIMIT_STRATEGY: "fixed-window"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"

    # AIRFLOW__LOGGING__LOG_FORMAT: "[%%(asctime)s] [ %%(process)s - %%(name)s ] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s"
    # AIRFLOW__LOGGING__LOGGING_CONFIG_CLASS: "log_config.DEFAULT_LOGGING_CONFIG"

    # PYTHONPATH: "/opt/airflow/dags:/opt/airflow/config:/opt/airflow/plugins"

  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
    # - ./requirements.txt:/opt/airflow/requirements.txt
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    # command: redis-server --requirepass ${AIRFLOW_REDIS_PASSWORD}
    privileged: true
    healthcheck:
      # test: ["CMD", "redis-cli", "-a", "${AIRFLOW_REDIS_PASSWORD}", "ping"]
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    # command: bash -c 'source /opt/venv/sandbox-new/bin/activate && exec airflow webserver'
    # command: bash -c "source /home/airflow/.bashrc && exec airflow webserver"
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common    
    # command: bash -c "source /home/airflow/.bashrc && exec airflow scheduler"
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common    
    # command: bash -c "source /home/airflow/.bashrc && exec airflow celery worker"
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    # mem_limit: 10g
    # mem_reservation: 4g

  # airflow-init:
  #   <<: *airflow-common
  #   entrypoint: bin/bash   
  #   command: 
  #     - -c 
  #     - |
  #       # Resource checking script  
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
  #         echo
  #       fi
        
  #       # Essential initialization      
  #       airflow db migrate &&
  #       airflow connections create-default-connections &&
  #       airflow users create \
  #         --username ${_AIRFLOW_WWW_USER_USERNAME:-admin} \
  #         --firstname Admin \
  #         --lastname User \
  #         --role Admin \
  #         --email admin@example.com \
  #         --password ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
      
  #   restart: on-failure

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo -e "\n=== System Resource Information ==="
        
        one_meg=1048576        
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"

        # Always print resource information
        echo -e "\nMemory:"
        echo "- Available Memory: $$(numfmt --to iec $$((mem_available * one_meg)))"
        echo "- Required Memory: 4GB"
        
        echo -e "\nCPUs:"
        echo "- Available CPUs: $${cpus_available}"
        echo "- Required CPUs: 2"
        
        echo -e "\nDisk Space:"
        echo "- Available Disk Space: $$(numfmt --to iec $$((disk_available * 1024)))"
        echo "- Required Disk Space: 10GB"
        
        echo -e "\n=== Resource Checks ==="

        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
        else
          echo -e "\033[0;32mAIRFLOW_UID is set to: ${AIRFLOW_UID}\e[0m"
        fi

        if (( mem_available < 4000 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          warning_resources="true"
        else
          echo -e "\033[0;32m✓ Memory check passed\e[0m"
        fi

        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          warning_resources="true"
        else
          echo -e "\033[0;32m✓ CPU check passed\e[0m"
        fi

        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024)))"
          warning_resources="true"
        else
          echo -e "\033[0;32m✓ Disk space check passed\e[0m"
        fi

        if [[ "$${warning_resources}" == "true" ]]; then
          echo -e "\n\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        else
          echo -e "\n\033[0;32m✓ All resource checks passed!\e[0m"
        fi
        
        echo -e "\n=== Starting Airflow Initialization ==="
        
        # Essential initialization      
        airflow db migrate &&
        airflow connections create-default-connections &&
        airflow users create \
          --username ${_AIRFLOW_WWW_USER_USERNAME:-admin} \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
    restart: on-failure

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
